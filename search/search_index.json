{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Java Interview Questions","text":""},{"location":"#collection-framework-hierarchy-in-java","title":"Collection framework Hierarchy in Java","text":""},{"location":"#package-javautil","title":"package java.util;","text":"<pre><code>classDiagram\nclass Iterable {\n  &lt;&lt;interface&gt;&gt;\n}\n\nclass Collection {\n  &lt;&lt;interface&gt;&gt;\n}\n\nclass List {\n  &lt;&lt;interface&gt;&gt;\n}\n\nclass Queue {\n  &lt;&lt;interface&gt;&gt;\n}\n\nclass Set {\n  &lt;&lt;interface&gt;&gt;\n}\n\nclass ArrayList {\n  &lt;&lt;class&gt;&gt;\n}\n\nclass LinkedList {\n  &lt;&lt;class&gt;&gt;\n}\n\nclass Vector {\n  &lt;&lt;class&gt;&gt;\n}\n\nclass Stack {\n  &lt;&lt;class&gt;&gt;\n}\n\nclass AbstractQueue {\n  &lt;&lt;abstract_class&gt;&gt;\n}\n\nclass PriorityQueue {\n  &lt;&lt;class&gt;&gt;\n}\n\nclass Deque {\n  &lt;&lt;interface&gt;&gt;\n}\n\nclass ArrayDeque {\n  &lt;&lt;class&gt;&gt;\n}\n\nclass AbstractSet {\n  &lt;&lt;abstract_class&gt;&gt;\n}\n\nclass HashSet {\n  &lt;&lt;class&gt;&gt;\n}\n\nclass LinkedHashSet {\n  &lt;&lt;class&gt;&gt;\n}\n\nclass SortedSet {\n  &lt;&lt;interface&gt;&gt;\n}\n\nclass TreeSet {\n  &lt;&lt;class&gt;&gt;\n}\n\nclass Map {\n  &lt;&lt;interface&gt;&gt;\n}\n\nclass AbstractMap {\n    &lt;&lt;abstract_class&gt;&gt;\n}\n\nclass Hashtable {\n  &lt;&lt;class&gt;&gt;\n}\n\nclass HashMap {\n    &lt;&lt;class&gt;&gt;\n}\n\nclass LinkedHashMap {\n&lt;&lt;class&gt;&gt;\n}\n\nclass SequenceMap {\n  &lt;&lt;interface&gt;&gt;\n}\n\nclass SortedMap {\n  &lt;&lt;interface&gt;&gt;\n}\n\nclass NavigableMap {\n  &lt;&lt;interface&gt;&gt;\n}\n\nclass TreeMap {\n  &lt;&lt;class&gt;&gt;\n}\n\nIterable &lt;|.. Collection\nCollection &lt;|.. List\nCollection &lt;|.. Queue\nCollection &lt;|.. Set\nList &lt;|-- Vector\nVector &lt;|.. Stack\nList &lt;|-- ArrayList\nList &lt;|-- LinkedList\nQueue &lt;|.. Deque\nDeque &lt;|-- LinkedList\nDeque &lt;|-- ArrayDeque\nQueue &lt;|-- AbstractQueue\nAbstractQueue &lt;|.. PriorityQueue\nSet &lt;|-- HashSet\nSet &lt;|-- AbstractSet\nSet &lt;|.. SortedSet\nAbstractSet &lt;|.. HashSet\nHashSet &lt;|.. LinkedHashSet\nAbstractSet &lt;|.. TreeSet\nMap &lt;|-- Hashtable\nMap &lt;|-- HashMap\nMap &lt;|-- AbstractMap\nMap &lt;|.. SequenceMap\nHashMap &lt;|.. LinkedHashMap\nAbstractMap &lt;|.. HashMap\nSequenceMap &lt;|.. SortedMap\nSortedMap &lt;|.. NavigableMap\nNavigableMap &lt;|-- TreeMap\nAbstractMap &lt;|.. TreeMap\n</code></pre>"},{"location":"#simplified-structure","title":"Simplified Structure","text":""},{"location":"#question-1-what-is-the-difference-between-hashmap-and-concurrenthashmap-in-java","title":"Question 1: What is the difference between HashMap and ConcurrentHashMap in Java ?","text":""},{"location":"#hashmap","title":"HashMap","text":"<ul> <li>Not Synchronized: <code>HashMap</code> is not thread-safe, which means that if multiple threads access it concurrently and at least one of the threads modifies the map structurally, it must be synchronized externally.</li> <li>Null Values: <code>HashMap</code> allows one null key and multiple null values.</li> <li>Performance: Because it's unsynchronized, <code>HashMap</code> offers better performance in environments where thread safety is not a concern.</li> <li>Iterators: The iterators returned by <code>HashMap</code> are fail-fast, which means they throw a <code>ConcurrentModificationException</code> if the map is structurally modified after the iterator is created, except through the iterator's own <code>remove</code> method.</li> </ul>"},{"location":"#concurrenthashmap","title":"ConcurrentHashMap","text":"<ul> <li>Thread Safety: <code>ConcurrentHashMap</code> is thread-safe and provides concurrency support by segmenting the map into different parts and locking only a portion of the map during updates. This allows concurrent reads and writes to the map, increasing performance in multi-threaded environments.</li> <li>No Null Values: <code>ConcurrentHashMap</code> does not allow null keys or null values. Attempting to store a null key or value will throw a <code>NullPointerException</code>.</li> <li>Performance: While <code>ConcurrentHashMap</code> is slower than <code>HashMap</code> due to its thread-safe nature, it is faster than a <code>Hashtable</code> or a synchronized <code>HashMap</code> (synchronized externally with <code>Collections.synchronizedMap</code>) under high concurrency.</li> <li>Iterators: The iterators returned by <code>ConcurrentHashMap</code> are weakly consistent, which means they reflect the state of the map at some point at or since the creation of the iterator. They do not throw <code>ConcurrentModificationException</code> but are designed to be used by concurrent threads.</li> <li>Concurrent Operations: <code>ConcurrentHashMap</code> includes additional methods to support concurrent operations, like <code>putIfAbsent</code>, <code>remove</code>, and <code>replace</code>, which perform atomic check-and-act operations.</li> </ul> <p>In summary, <code>HashMap</code> should be used in non-threaded or single-threaded environments, or when the map does not require concurrent access/modification. <code>ConcurrentHashMap</code> is the preferable choice in multi-threaded applications where the map is accessed by concurrent threads and high performance is required.</p>"},{"location":"#question-2-what-will-be-the-difference-with-concurrenthashmap-when-we-make-the-hashmap-synchronized","title":"Question 2: What will be the difference with <code>ConcurrentHashmap</code> when we make the HashMap <code>synchronized</code> ?","text":"<p>Answer : Making a <code>HashMap</code> synchronized typically means wrapping it using <code>Collections.synchronizedMap()</code>. This provides a basic level of thread safety by ensuring that each individual operation on the <code>HashMap</code> is synchronized. However, there are still significant differences between a synchronized <code>HashMap</code> and a <code>ConcurrentHashMap</code>:</p>"},{"location":"#synchronized-hashmap","title":"Synchronized HashMap","text":"<ul> <li>Method-Level Synchronization: Every method call on the <code>HashMap</code> is synchronized, so only one thread can access the map at a time for any operation.</li> <li>Single Lock: There is a single lock for the entire map, which can lead to contention when many threads are accessing the map concurrently.</li> <li>Iterator Safety: The iterators for the synchronized <code>HashMap</code> are not thread-safe. If one thread is iterating over the map while another thread modifies it, a <code>ConcurrentModificationException</code> may be thrown. External synchronization is needed during iteration to avoid this exception.</li> <li>Concurrent Access: Multiple readers or a writer and a reader cannot access the map at the same time. This can be a significant performance bottleneck.</li> </ul>"},{"location":"#concurrenthashmap_1","title":"ConcurrentHashMap","text":"<ul> <li>Segment-Level Locking: <code>ConcurrentHashMap</code> uses multiple locks on segments of the map, allowing concurrent access to different segments and only locking a segment during writes. This minimizes contention and improves performance.</li> <li>Lock Stripping: <code>ConcurrentHashMap</code> employs a technique called lock stripping, which uses a finer-grained locking mechanism for higher concurrency.</li> <li>Iterator Safety: Iterators in <code>ConcurrentHashMap</code> are weakly consistent and do not throw <code>ConcurrentModificationException</code>, allowing non-blocking reads and updates to the map during iteration.</li> <li>Enhanced Concurrent Access: Multiple readers can access the map concurrently without locking, and writers can add or update without blocking readers. This allows higher levels of concurrency.</li> </ul> <p>In short, while you can make a <code>HashMap</code> thread-safe by synchronizing it, <code>ConcurrentHashMap</code> is designed for higher throughput in concurrent scenarios and can handle multiple readers and writers efficiently. Synchronized <code>HashMap</code> is a more conservative approach where every operation is thread-safe but potentially slower under high concurrency due to the coarse-grained lock mechanism.</p>"},{"location":"#question-3-difference-between-volatile-atomic-and-synchronized-in-java","title":"Question 3: Difference Between Volatile, Atomic And Synchronized in Java","text":""},{"location":"#question-4-transient-keyword-in-java","title":"Question 4: Transient Keyword in Java","text":""},{"location":"#question-5-strictfp-keyword-in-java","title":"Question 5: strictfp Keyword in Java","text":""},{"location":"#question-6-hasmap-vs-hashtable","title":"Question 6: HasMap vs Hashtable","text":""},{"location":"#question-7-semaphores-in-java","title":"Question 7: Semaphores in Java","text":""},{"location":"#question-8-final-finally-vs-finalize-finalize-is-depricated-since-java-9","title":"Question 8: final, finally{} vs finalize(): finalize is depricated since Java 9","text":""},{"location":"#final-restrict-the-modification","title":"final: Restrict the modification","text":"<pre><code>variable: cannot modify its value\nmethod: cannot be override \nclass: cannot be extended\n</code></pre>"},{"location":"#finally-block-of-code-written-generally-after-try-catch-block-which-will-be-executed-always-no-matter-what","title":"finally{} : Block of code written generally after try catch block which will be executed always no matter what","text":""},{"location":"#finalize-part-of-object-class-invoked-by-gc-just-before-garbage-collection-for-some-clean-up-activity","title":"finalize(): part of object class, invoked by GC just before garbage collection for some clean up activity","text":"<pre><code>finalize is depricated since Java 9\n</code></pre>"},{"location":"#question-9-why-map-is-not-under-collections","title":"Question 9: Why <code>Map</code> is not under <code>Collections</code>?","text":""},{"location":"#_1","title":"Java Interview Questions","text":"<ul> <li>All Collection Classes have <code>Value</code> parameter and the methods are designed to provide implementation around <code>Value</code>. </li> <li>While <code>Map</code> has <code>Key-value</code> parameter</li> </ul>"},{"location":"#question-9-hashmap-internal-implementation","title":"Question 9: <code>HashMap</code> internal implementation?","text":""},{"location":"#hash-functions-eg-md1-sh256-custom-hashcode-implementation","title":"Hash functions: eg: MD1, SH256, Custom hashcode implementation","text":"<p>Node: </p> <ul> <li>hash</li> <li>key</li> <li>value</li> <li>next Node <p>Default initial capacity : </p> <ul> <li>1&gt;&gt;4 i.e. 16 </li> </ul> <p>Map Internally Stores data:</p> <p>Hash Collision</p> <ul> <li>put(5, \"abc\") -&gt; 61610 </li> <li>get(5) -&gt; hash() -&gt; 61610 % 16(capacity)  -&gt; gives index -&gt; iterate over list to find key <code>5</code></li> <li>i.e. compares <code>hash</code> and <code>value</code></li> </ul> <p>Contract b/w Hashcode and equals method</p> <ol> <li>if obj1 == obj2 their hash should be also same</li> <li>if 2 objects hash is same, doesn't mean objects are same.</li> </ol> <p>Load Factor: </p> <ul> <li><code>Default = 0.75</code> -&gt; 16 * 0.75 = 12</li> <li>increases or doubles the size of hashmap when load factor is reached, HashMap does rehash</li> </ul> <p>Treefy Threshold = 8 (it is also called <code>Bin count</code>)</p> <ul> <li>Converts the LinkedList O(n) into Tree, its a Balanced Binary Search tree(Red -Black tree),</li> <li>Searching would be in O(log(n))</li> </ul> <p>TIme Complexity</p> <ul> <li><code>Add</code>: Amortized O(1) i.e average</li> <li><code>Remove</code>: Amortized O(1)</li> <li><code>Get</code>: amortized O(1)</li> </ul>"},{"location":"md_example1/","title":"Example documentation: E-Commerce Site Application","text":"<p>Repository URL</p> <p>This is a Java Spring Boot project designed for e-commerce operations. This application demonstrates transactional order processing, global exception handling, and RESTful API design, utilizing technologies such as Spring Boot, SQLite, and MyBatis.</p>"},{"location":"md_example1/#project-overview","title":"Project Overview","text":"<p>This project provides a backend for e-commerce operations, emphasizing transaction integrity, data consistency, and error handling:</p>"},{"location":"md_example1/#transactional-order-processing","title":"Transactional Order Processing","text":"<p>The application employs Spring Boot's <code>@Transactional</code> annotation with isolation level <code>SERIALIZABLE</code> to ensure each order is processed consistently and isolated, safeguarding against concurrent transaction anomalies.</p> @Trasactional annotation for resource locking<pre><code>    @Transactional(isolation = Isolation.SERIALIZABLE, timeout = 6)\n    public ResponseMessage createOrder(CreateOrder createOrder) throws InsufficientItemStockException, InsufficientUserBalanceException {\n        // Transactional logic\n    }\n</code></pre>"},{"location":"md_example1/#global-exception-handling","title":"Global Exception Handling","text":"<p><code>@RestControllerAdvice</code> is used to catch and handle exceptions globally, ensuring any errors are processed uniformly, providing clear feedback to the client.</p> <pre><code>    @RestControllerAdvice\n    public class ApplicationExceptionHandler {\n        // Exception handling methods\n    }\n</code></pre>"},{"location":"md_example1/#highlights","title":"Highlights","text":"<ul> <li>Create Order Concurrency Integration Test: Implemented comprehensive integration tests at both the controller and service levels to ensure that only one 1 is processed when the Item Stock is 1, even if multiple order requests( Used 9 concurrent requests) are received concurrently. This guarantees the integrity of order processing under high load and prevents stock inconsistencies.</li> <li>EcsiteControllerConcurrencyIntegrationTest</li> <li>EcsiteServiceConcurrencyIntegrationTest</li> </ul>"},{"location":"md_example1/#technology-stack","title":"Technology Stack","text":"<ul> <li>Spring Boot 3.1.4: Framework</li> <li>SQLite: SQL Database</li> <li>MyBatis: Database ORM</li> <li>Java 21: Programming Language</li> <li>Mockito: Testing Framework</li> </ul>"},{"location":"md_example1/#getting-started","title":"Getting Started","text":"<p>To get the application running locally:</p> <ol> <li>Ensure JDK 21 is installed.</li> <li>Start the application:     <pre><code>mvn spring-boot:run\n</code></pre></li> </ol>"},{"location":"md_example1/#api-endpoints","title":"API Endpoints","text":"<p>Manage items, users, and orders through these endpoints:</p> <ul> <li> <p>Items:</p> <ul> <li><code>GET /api/item/{id}</code>: Retrieves an item's details.</li> <li><code>POST /api/item</code>: Adds a new item.</li> <li><code>DELETE /api/item/{id}</code>: Removes an item.</li> </ul> </li> <li> <p>Users:</p> <ul> <li><code>GET /api/user/{id}</code>: Fetches user details.</li> <li><code>POST /api/user</code>: Creates a user account.</li> <li><code>DELETE /api/user/{id}</code>: Deletes a user account.</li> </ul> </li> <li> <p>Orders:</p> <ul> <li><code>POST /api/item/{item_id}/buy</code>: Processes an item purchase.</li> </ul> </li> </ul>"},{"location":"md_example1/#purchase-process-sequence-diagram","title":"Purchase Process Sequence Diagram","text":"<p>The sequence diagram below illustrates the steps involved in the purchase process:</p>"},{"location":"md_example1/#purchase-product-post-apiitemitem_idbuy","title":"Purchase Product <code>POST: /api/item/{item_id}/buy</code>","text":"<pre><code>sequenceDiagram\n    actor client as User\n    participant controller as Ecsite&lt;br/&gt;&lt;br/&gt;Controller\n    participant service as Ecsite&lt;br/&gt;&lt;br/&gt;Service\n    participant repository as Ecsite&lt;br/&gt;&lt;br/&gt;Mapper\n    participant db as Sqlite&lt;br/&gt;&lt;br/&gt;Database\n    client -&gt;&gt; controller: API Call: Purchase Item &lt;br/&gt;&lt;br/&gt;POST: /api/item/ITEM1234/buy\n    activate controller \n        alt if User Exist\n            controller -&gt;&gt; service: Check User Existence\n        else \n            controller -&gt;&gt; client: HTTP Status: 404&lt;br/&gt;&lt;br/&gt;{\"error\": \"User not found\"}\n        end\n        alt if Item Exist \n            controller -&gt;&gt; service: Check Item Existence\n        else\n            controller -&gt;&gt; client: HTTP Status: 404&lt;br/&gt;&lt;br/&gt;{\"error\": \"Item not found\"}\n        end\n        controller -&gt;&gt; service: Service call\n        activate service\n            note over service,db: Transaction Starts\n            alt if item stock sufficient\n                service -&gt;&gt; repository: Check Item Stock &gt;= Quantity requested\n            else\n                service -&gt;&gt; client: HTTP Status: 400&lt;br/&gt;&lt;br/&gt;{\"error\": \"Item stock insufficient\"}\n            else if user balance sufficient\n                service -&gt;&gt; repository: Check User Balance &gt;= Purchase Amount\n            else\n                service -&gt;&gt; client: HTTP Status: 400&lt;br/&gt;&lt;br/&gt;{\"error\": \"User Balance insufficient\"} \n            end\n                service -&gt;&gt; repository: Update Users Savings Balance\n                service -&gt;&gt; repository: Update Item Stock\n                service -&gt;&gt; repository: Create Purchase/ Order record\n            note over service,db: Transaction Ends\n            service -&gt;&gt; controller: Response {\"message\": \"success\"}\n        deactivate service\n        controller -&gt;&gt; client: HTTP Status: 200&lt;br/&gt;&lt;br/&gt;{\"message\": \"success\"}\n    deactivate controller</code></pre>"},{"location":"md_example1/#testing","title":"Testing","text":"<p>Run unit tests with:</p> <p><pre><code>  mvn test\n</code></pre> Generate Test Coverage Report with:</p> <pre><code>  mvn clean test jacoco:report\n</code></pre>"},{"location":"md_example1/#jacoco-test-coverage-report","title":"JaCoCo Test Coverage Report","text":"<p>image </p>"},{"location":"md_example1/#todos-and-future-improvements","title":"ToDo's and Future Improvements","text":"<ul> <li>Swagger API Schema: To enhance API documentation and user interaction.</li> <li>Linter in Pre-commit: To maintain code quality and ensure style consistency.</li> <li>Refactor Validation Logic: For improved data integrity at the service level.</li> <li>Circuit Breaker Mechanism: Implement using <code>Resilience4j</code> for better fault tolerance.</li> <li>Soft Delete for Items: Modify deletion logic for items to allow data recovery and maintain History records.</li> </ul>"}]}